# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Bot CI

on:
  pull_request:
    paths:
      - '.github/workflows/bot.yml'
      - 'bot/**'

env:
  SERVICE_NAME: 'bot'
  NODEJS_VERSION: '18.12.1'
  PNPM_VERSION: '7.30.1'

jobs:
  # build-and-push:
  #   runs-on: ubuntu-latest
  #   if: github.event.pull_request.draft == false

  #   steps:
  #     - name: Checkout Codebase
  #       uses: actions/checkout@v3

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  #     - name: Setup Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Build and push image
  #       uses: docker/build-push-action@v3
  #       with:
  #         context: .
  #         file: ./server/Dockerfile
  #         push: true
  #         tags: ${{ secrets.DOCKER_HUB_USERNAME }}/codenaute:server

  workflow:
    # needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    # container:
    #   image: 'reynandev/codenaute:server'
    #   env:
    #     NODE_ENV: test
    #     DB_TEST_PORT: 5432
    #     DB_TEST_HOST: postgres-test
    #     DB_TEST_DATABASE: ${{ secrets.DB_TEST_DATABASE }}
    #     DB_TEST_USER: ${{ secrets.DB_TEST_USER }}
    #     DB_TEST_PASSWORD: ${{ secrets.DB_TEST_PASSWORD }}
    #   ports:
    #     - 5000:5000
    #   volumes:
    #     - ${{ github.workspace }}:/app

    # services:
    #   postgres-test:
    #     image: 'postgres:15.1-alpine'
    #     env:
    #       POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
    #       POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
    #       POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
    #     ports:
    #       - 5432:5432
    #     options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout Codebase
        uses: actions/checkout@v3

      - name: Install dependencies globaly
        run: pnpm install

      - name: Install dependencies on bot
        run: pnpm install
        working-directory: ./bot

      - name: Restore Github Cache
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.OS }}-platform-server-${{ hashFiles('pnpm-lock.yaml', '**/pnpm-lock.yaml') }}

      - name: Run Linter
        run: pnpm lint
        working-directory: ./bot

      - name: Run Tests
        run: pnpm test
        working-directory: ./bot

      - name: Run Prettier Formatting
        run: npx prettier --write .
